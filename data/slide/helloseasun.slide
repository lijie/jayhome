Hello 西山居
Subtitle of document

李杰
西山居
lijie3@kingsoft.com

* About Me
2005 毕业

之后混迹各个小公司

2010 腾讯, QQ空间, 天美艺游

2014 西山居

* 骨灰级游戏玩家

我从雅达利时代就投身游戏世界

.image slide_files/atari-2600-2.jpg

* 黑历史

- web开发

- 单片机嵌入式开发

- 大型互联网服务后台开发

- 游戏开发

* 单片机

单片机在我们国内比较常见的有C51和atmega系列等等.

.image slide_files/ATMEGA8-16AU.jpg 300 _

* 单片机下的开发

在单片机下写代码跟在Win/Linux下写代码, 差异非常大.

在现代os下写代码, 需要了解

- 操作系统本身的一些特性
- syscall
- 一种或者多种framework. 等等

在单片机下, 最需要了解的是芯片的数据手册, 以及你当前工作硬件的原理图.

单片机基本上没有什么太多标准库, 也没有进程线程虚拟内存等等现代OS的概念.

* 原理图

.link http://www.qucosa.de/fileadmin/data/qucosa/documents/5550/data/atmega8_demoboard.png

* 单片机下的"并行"

单片机没有现代OS的支撑, 往往CPU本身也很弱.

所以单片机下要并行的处理任务, 我们得抛弃OS本身, 从"上古时期"寻求解决方案...

我使用的方案是Donald Knuth在<计算机程序设计艺术>里面提出的一种彻底抛弃stack的方案

* Stackless coroutine

最简单的方案:
将一个复杂的运行时间长的功能拆分为多个step,每一个调用只完成一个step.

.code slide_files/co1.c

* Stackless coroutine

更"灵活"的方案, 可以在函数任意位置跳出

.code slide_files/co2.c

* Stackless coroutine

更"风骚"的方案, 可读性略有点捉急...

.code slide_files/co3.c

* Stackless coroutine

用宏来包装下, 就像那么回事了

.code slide_files/co4.c

* 嵌入式系统

嵌入式系统在我看来其复杂度跟PC已经很接近了.

最大的差异我认为嵌入式系统往往是应用于特定领域,

在成本和功能上为其服务的领域作了控制和优化,

比如手机, 各种盒子, 还有小米电视之类

* 嵌入式系统下的开发

现代嵌入式系统往往都是运行的Linux或者其它现代OS的精简/定制版.

其对程序员的要求基本上跟PC开发已经没啥区别了.

不过有个PC程序员可能几乎不考虑的问题在嵌入式下很重要:

*功耗*

* Linux下的驱动开发

* 探索操作系统内核

* 参与开源

* 软硬皆通的终极挑战之一: Emulator

emulator开发, 比如FC模拟器, PS/PS2模拟器, 是我个人所知的对程序员最有挑战的任务之一.

你必须软硬通吃, 精通多个平台, 对计算机体系结构有深入的了解.

2D, 3D相关的图形技术对你来说也不在话下.

甚至, 你还得熟知计算机历史, 否则你会对几十年前的硬件感到费解.

另外, 你还得很有钱...

* GameBoy模拟器

很多年前我在以前的一家公司, 开发机顶盒,
我在上面开发了一个GameBoy的模拟器, 可以用遥控器玩几个游戏.

理论上来说, 开发流程会很长...

不过我站在巨人的肩膀上, 所有GameBoy模拟器开发需要的资料都已经可以google到了...
我只需要对着资料写代码就好...

.image slide_files/th.jpg 200 _

* 进入互联网行业

企鹅业务的特点:

用户量大, 请求量大, 数据量大

当然还有:

事情多, 会议多, 美女多...

* 量变导致质变

* 点个赞

- 数据实时更新
- 如果点赞用户里面存在访问者的好友, 则显示好友昵称
- 保存全量数据

* 点个赞

Qzone个人feeds首页请求量: 2w/s

每页展示feed数量: 10

用户平均好友数: 150

计算量: 20000 * 10 * 150 = 3千万/秒

每条feed被赞的数量从0~几百万不等.

理论被赞上限是2^32

每次计算是在0~几百万的QQ号里面判断你的某个好友在不在

* 照片

每天上传超过1亿张

存储量实在太大以至于无法在深圳容纳一个完整的相册业务...

耗电量惊人, 低功耗服务器技术值得投入

* 推荐系统与机器学习

* 可能认识的人

选取100多个用户特征值

通过QQ二度关系链, 朋友关系链, weibo关系链选出约500个左右作为待计算集合

利用比如kNN等机器学习算法算出最可能认识的前50个推荐给用户

根据用户是否加好友做出正负反馈, 调整算法结果.

* 可能感兴趣的话题/说说/照片/游戏 ...

赞过某个话题/照片, 安装过某个游戏, 会推荐相似度高的照片, 游戏给用户.

会向用户推荐他的好友感兴趣的东东

* 天天手游系列

受益于微信和QQ平台, 非常赚钱

除了用户量大以外, 总的来说, 后台架构比较简单

相比端游, 有些思路要转变:
- 手游后台要做向前兼容
- 考虑到流量要减少数据包 等等
